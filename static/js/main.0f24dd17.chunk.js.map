{"version":3,"sources":["logo.svg","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","viewingMode","role","htmlFor","palleteFunc","name","value","for","TextForm","useState","text","setText","arr","split","x","i","length","includes","addressingSpaceIssue","console","log","style","color","heading","rows","onChange","event","target","Up","toUpperCase","showAlert","toLowerCase","class","Alert","word","alert","charAt","slice","message","defaultProps","App","setMode","setAlert","pallete","setPallete","timeout","setTimeout","document","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0f24dd17.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport PropTypes from \"prop-types\"\r\n{/*import { Link } from 'react-router-dom';*/}\r\nexport default function Navbar(props) {\r\n\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          {/*<a className=\"nav-link\" href=\"#about\">About</a>*/}\r\n        </li>\r\n      </ul>\r\n      <div className=\"form-check form-switch\">\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.viewingMode} role=\"switch\" id=\"radio button for changing mode\"/>\r\n  <label className={`form-check-label text-${props.mode === \"light\" ? \"dark\":\"light\"}`} htmlFor=\"radio button for changing mode\">Change visibility mode</label>\r\n</div>\r\n<ul className=\"nav flex-column px-2\">\r\n  <li className=\"nav-item\">\r\n  <div className=\"form-check\">\r\n  <input className=\"form-check-input\" type=\"radio\" onClick={props.palleteFunc} name=\"exampleRadios\" id=\"exampleRadios2\" value=\"option2\"/>\r\n  <label className=\"form-check-label\" for=\"exampleRadios2\">\r\n    Violet Dark Mode\r\n  </label>\r\n</div>\r\n  </li>\r\n</ul>\r\n\r\n      {/*<form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n  </form>*/}\r\n    </div>\r\n  </div>\r\n</nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n\r\n  title: PropTypes.string.isRequired,\r\n  \r\n}\r\n\r\nNavbar.defaultProps = {\r\ntitle: \"Enter Title Here\"\r\n}","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n\r\n\r\n    const clearText = () => {\r\n        setText(\"\")\r\n        props.showAlert(\"Text box cleared\", \"success\")\r\n\r\n\r\n        \r\n        \r\n    }\r\n    \r\n    const ImplementUpperCase = () => {\r\n        let Up = text.toUpperCase()\r\n        setText(Up)\r\n        props.showAlert(\"Text converted to UpperCase!\", \"success\")\r\n\r\n\r\n\r\n    }\r\n    const ImplementLowerCase = () => {\r\n        let Up = text.toLowerCase()\r\n        setText(Up)\r\n        props.showAlert(\"Text converted to LowerCase!\", \"success\")\r\n\r\n\r\n\r\n    }\r\n    const ChangeHandler = (event) => {\r\n        setText(event.target.value )\r\n\r\n\r\n    }\r\n    \r\n\r\n    const [text, setText] = useState(\"\");\r\n    let arr = text.split(\" \")\r\n\r\n    \r\n    const addressingSpaceIssue = (arr) => {\r\n    for (let i = 0; i < arr.length; i++) {\r\n         if(arr[i].includes(\"\") || arr[i].includes(\" \")) {\r\n               arr.length--\r\n            }\r\n                                \r\n\r\n    return arr.length\r\n\r\n    }   \r\n\r\n }\r\nlet x = addressingSpaceIssue(arr)\r\nconsole.log(x)\r\n\r\n    return (\r\n        <>\r\n\r\n  <div>\r\n      <div className=\"container\" style={{color: props.mode===\"dark\"? \"white\" : \"black\"}}>\r\n      <h1>{props.heading}</h1> \r\n      <div className=\"mb-3\">\r\n      <textarea className=\"form-control\" id=\"myBox\"  rows=\"8\" value={text} \r\n      onChange={ChangeHandler}></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1\"  onClick={ImplementUpperCase}> Convert to UpperCase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={ImplementLowerCase}> Convert to lowercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={clearText} type=\"button\" class=\"btn btn-primary\">Clear Text</button>\r\n      </div>\r\n  </div>\r\n  <div className=\"container my-3\" style={{color: props.mode===\"dark\"? \"white\" : \"black\"}} >\r\n      <h1>Text Summary style</h1>\r\n      <p>Your Text has {x} words and {text.length} characters  </p>\r\n      <p>{0.008 * arr.length} Minutes Read</p>\r\n       <h2>Preview</h2>\r\n       <p>{text.length>0?text:\"Enter text to preview\"}</p>\r\n  </div>\r\n  \r\n  </>\r\n\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalizeFirstWord = (word)=> {\r\n        let yo = word.charAt(0).toUpperCase() + word.slice(1)\r\n        return yo\r\n\r\n    \r\n\r\n    }\r\n    return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalizeFirstWord(props.alert.type)} {props.alert.message}</strong> \r\n      </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm  from \"./Components/TextForm\";\nimport Alert from './Components/Alert';\nimport { useState } from 'react';\nimport React from \"react\";\n{/*import About from './Components/About';*/}\n/*import {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";*/\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n  const [alert,setAlert] = useState(null)\n\n  const [pallete, setPallete] = useState(\"light\")\n\n  const palleteFunc = () => {\n    if (pallete===\"light\") {\n      setPallete(\"dark\")\n      document.body.style.backgroundColor = \"violet\"\n    }\n    else{\n      setPallete(\"light\")\n      document.body.style.backgroundColor = \"light\"\n    }\n  }\n\n     \n\n  const timeout =()=>{\n    setAlert(null)\n  }\n\n  const showAlert=(message,type)=> {\n    setAlert({\n      message: message,\n      type: type,\n    })\n    setTimeout(timeout,1500)\n\n  } \n  const viewingMode =()=>{\n    if(mode === \"light\"){\n    setMode(\"dark\")\n    document.body.style.backgroundColor = \"#0b3572\"\n    showAlert(\"You're in Dark Mode\", \"success\")\n    }\n\n    else\n    {\n    setMode(\"light\")\n    document.body.style.backgroundColor = \"white\"\n    showAlert(\"You're in Light Mode\", \"success\")\n    }\n  }\n  return (\n   <>\n   \n\n  \n   {/*<Router>*/}\n   <Navbar title = \"TextUtils\" mode = {mode} viewingMode = {viewingMode} pallete={pallete} palleteFunc={palleteFunc}/>\n   <Alert alert={alert}/>\n   <div className=\"container my-3\">\n   {/*<Routes>*/}\n        \n          {/*<Route exact path=\"/\" element={}*/}\n          <TextForm heading = \"Enter Text Here\" mode = {mode} showAlert={showAlert}/> />\n          {/*<Route path=\"/about\" element= {<About />}*/}\n  {/*<Routes>*/}\n    </div>\n  {/*<Router>*/}\n   </>\n   \n    \n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}